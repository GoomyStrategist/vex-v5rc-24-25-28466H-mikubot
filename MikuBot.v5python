{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nnorth_east = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nsouth_east = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\nsouth_west = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nnorth_west = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# setup\nfrom vex import *\ntemp = 0\n# Begin project code\ndef grab():# grab the moble goal\n    if str(digital_out_a) == \"Digital Out(21) PORT(0) 0\":\n        digital_out_a.set(True)\n    else:\n        digital_out_a.set(False)\ncontroller_1.buttonA.pressed(grab) # register controller input\ndef driver_control():\n    if brain.sdcard.is_inserted():\n        brain.screen.draw_image_from_file(\"miku(1).png\", 0,0)# draw miku on brain\n    while 1 == 1:\n        if controller_1.axis1.position() >= 10: # spin east\n            north_east.set_velocity(-controller_1.axis1.position() * 0.6,PERCENT)\n            north_west.set_velocity(controller_1.axis1.position() * 0.6,PERCENT)\n            south_east.set_velocity(-controller_1.axis1.position() * 0.6,PERCENT)\n            south_west.set_velocity(controller_1.axis1.position() * 0.6,PERCENT)\n            north_east.spin(FORWARD)\n            north_west.spin(FORWARD)\n            south_east.spin(FORWARD)\n            south_west.spin(FORWARD)\n        elif controller_1.axis1.position() <= -10: # spin west\n            north_east.set_velocity(-controller_1.axis1.position() * 0.6,PERCENT)\n            north_west.set_velocity(controller_1.axis1.position() * 0.6,PERCENT)\n            south_east.set_velocity(-controller_1.axis1.position() * 0.6,PERCENT)\n            south_west.set_velocity(controller_1.axis1.position() * 0.6,PERCENT)\n            north_east.spin(FORWARD)\n            north_west.spin(FORWARD)\n            south_east.spin(FORWARD)\n            south_west.spin(FORWARD)\n        elif controller_1.axis3.position() >= 15 and controller_1.axis4.position() >=15: # overide if NE diagonal input\n            temp = controller_1.axis3.position() / 2 + controller_1.axis4.position() / 2\n            north_west.set_velocity(temp,PERCENT)\n            south_east.set_velocity(temp,PERCENT)\n            north_east.set_velocity(0,PERCENT)\n            south_west.set_velocity(0,PERCENT)\n            north_east.spin(FORWARD)\n            north_west.spin(FORWARD)\n            south_east.spin(FORWARD)\n            south_west.spin(FORWARD)\n        elif controller_1.axis3.position() <= -15 and controller_1.axis4.position() <= -15:  #overide if NW diagonal input\n            temp = abs(controller_1.axis3.position()) / 2 + abs(controller_1.axis4.position()) / 2\n            north_west.set_velocity(-temp,PERCENT)\n            south_east.set_velocity(-temp,PERCENT)\n            north_east.set_velocity(0,PERCENT)\n            south_west.set_velocity(0,PERCENT)\n            north_east.spin(FORWARD)\n            north_west.spin(FORWARD)\n            south_east.spin(FORWARD)\n            south_west.spin(FORWARD)\n        elif controller_1.axis3.position() <= -15 and controller_1.axis4.position() >= 15: # overide if SE diagonal input\n            temp = abs(controller_1.axis3.position()) / 2 + abs(controller_1.axis4.position()) / 2\n            north_west.set_velocity(0,PERCENT)\n            south_east.set_velocity(0,PERCENT)\n            north_east.set_velocity(-temp,PERCENT)\n            south_west.set_velocity(-temp,PERCENT)\n            north_east.spin(FORWARD)\n            north_west.spin(FORWARD)\n            south_east.spin(FORWARD)\n            south_west.spin(FORWARD)\n        elif controller_1.axis3.position() >= 15 and controller_1.axis4.position() <= -15: # overide if SW diagonal input\n            temp = abs(controller_1.axis3.position()) / 2 + abs(controller_1.axis4.position()) / 2\n            north_west.set_velocity(0,PERCENT)\n            south_east.set_velocity(0,PERCENT)\n            north_east.set_velocity(temp,PERCENT)\n            south_west.set_velocity(temp,PERCENT)\n            north_east.spin(FORWARD)\n            north_west.spin(FORWARD)\n            south_east.spin(FORWARD)\n            south_west.spin(FORWARD)\n        elif int(controller_1.axis3.position()) >= 5: # north input\n            north_east.set_velocity(controller_1.axis3.position(),PERCENT)\n            north_west.set_velocity(controller_1.axis3.position(),PERCENT)\n            south_east.set_velocity(controller_1.axis3.position(),PERCENT)\n            south_west.set_velocity(controller_1.axis3.position(),PERCENT)\n            north_east.spin(FORWARD)\n            north_west.spin(FORWARD)\n            south_east.spin(FORWARD)\n            south_west.spin(FORWARD)\n        elif controller_1.axis3.position() <= -5: # south input\n            north_east.set_velocity(controller_1.axis3.position(),PERCENT)\n            north_west.set_velocity(controller_1.axis3.position(),PERCENT)\n            south_east.set_velocity(controller_1.axis3.position(),PERCENT)\n            south_west.set_velocity(controller_1.axis3.position(),PERCENT)\n            north_east.spin(FORWARD)\n            north_west.spin(FORWARD)\n            south_east.spin(FORWARD)\n            south_west.spin(FORWARD)\n        elif controller_1.axis4.position() >= 5: # east input\n            north_east.set_velocity(-controller_1.axis4.position(),PERCENT)\n            north_west.set_velocity(controller_1.axis4.position(),PERCENT)\n            south_east.set_velocity(controller_1.axis4.position(),PERCENT)\n            south_west.set_velocity(-controller_1.axis4.position(),PERCENT)\n            north_east.spin(FORWARD)\n            north_west.spin(FORWARD)\n            south_east.spin(FORWARD)\n            south_west.spin(FORWARD)\n        elif controller_1.axis4.position() <= -5: # west input\n            north_east.set_velocity(-controller_1.axis4.position(),PERCENT)\n            north_west.set_velocity(controller_1.axis4.position(),PERCENT)\n            south_east.set_velocity(controller_1.axis4.position(),PERCENT)\n            south_west.set_velocity(-controller_1.axis4.position(),PERCENT)\n            north_east.spin(FORWARD)\n            north_west.spin(FORWARD)\n            south_east.spin(FORWARD)\n            south_west.spin(FORWARD)\n        else: # stop if no input\n            north_east.set_velocity(0,PERCENT)\n            north_west.set_velocity(0,PERCENT)\n            south_east.set_velocity(0,PERCENT)\n            south_west.set_velocity(0,PERCENT)\ndef autonomous(): \n    north_east.set_velocity(80,PERCENT)\n    north_west.set_velocity(80,PERCENT)\n    south_east.set_velocity(80,PERCENT)\n    south_west.set_velocity(80,PERCENT)\n    north_east.spin(FORWARD)\n    north_west.spin(FORWARD)\n    south_east.spin(FORWARD)\n    south_west.spin(FORWARD)\n    wait(.5,SECONDS)\n    north_east.set_velocity(0,PERCENT)\n    north_west.set_velocity(0,PERCENT)\n    south_east.set_velocity(0,PERCENT)\n    south_west.set_velocity(0,PERCENT)\n    wait(5,SECONDS)\ncompetition = Competition(driver_control, autonomous)\n\n        ","textLanguage":"python","robotConfig":[{"port":[20],"name":"north_east","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[19],"name":"south_east","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"south_west","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"north_west","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.5","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}